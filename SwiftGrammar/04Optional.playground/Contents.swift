import UIKit

// 4.オプショナル型

/* 
 Swift では扱うべき値が存在しないことを表すために nil という特別な値を用意している。
 整数の場合は、Int型。nilを持つ値をInt型ではなく、Int? という別の型として扱う。これをオプショナル型（Optional）Int型と呼びます。
 
 nilが含まれるときは、別の型として扱うのがポイント！
 */

var a : Int = 0
var b : Int? = 10
b = nil             // 代入可能
a = nil             // エラーになる

// 失敗のあるイニシャライザ
// このイニシャライザは引数の文字列を整数として評価した値を返しますが、整数として評価できなかった場合には nil を返します。
// このイニシャライザはの返り値を受け取る変数は Int型 ではなく、Int?型 である必要がある。

let olympic = "2020"
var year : Int? = Int(olympic)  // 2020 が返される
var city : Int? = Int("Tokyo")  // 整数として評価できない。 nil が返される

// パラメータ付き型指定を使うと、Int型のオプショナル型は次のようにかける
var year2 : Optional<Int> = Int("2020")

// 開示（アンラップ：unwrap）
// Int?型からInt型を取り出すように、オプショナル型からデータを取り出すことを、開示（unwrap）と呼ぶ
// 開示のためにはオプショナル型に対して「!」をという記号を使う。
// 「!」は式の前（左）においたときは論理否定演算子とみなされるけど、式の後ろ（右側）においたときは開示指定になる。
let year3 : Int? = Int("2020")
let next : Int = year! + 4  // 開示指定が必要

/***************************************
 オプショナル束縛構文
 */

let year4 : Int? = Int("1986")
if let y = year4 {                          // この書き方に注意！
    print("ハレー彗星は\(y + 75)年に来る")     // y は Int型、開示指定は不要
} else {
    print("エラー")                          // ここで　定数 y は使えない
}
// if let で year4 が nil でないときはその値が開示されて y に代入される。
// このときに if文は true になる。
// y は int型で if　then 節の中でだけ有効な変数になる。
// nil の場合は、if文 は false になり else 節が実行されるが y は参照することが利用できない。

